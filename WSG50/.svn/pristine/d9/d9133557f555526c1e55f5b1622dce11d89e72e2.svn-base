/* Auto-generated by genmsg_cpp for file /home/clonecomputer/catkin_ws/src/wsg50/wsg_50_common/msg/Cmd.msg */
#ifndef WSG_50_COMMON_MESSAGE_CMD_H
#define WSG_50_COMMON_MESSAGE_CMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wsg_50_common
{
template <class ContainerAllocator>
struct Cmd_ {
  typedef Cmd_<ContainerAllocator> Type;

  Cmd_()
  : mode()
  , pos(0.0)
  , speed(0.0)
  {
  }

  Cmd_(const ContainerAllocator& _alloc)
  : mode(_alloc)
  , pos(0.0)
  , speed(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mode;

  typedef float _pos_type;
  float pos;

  typedef float _speed_type;
  float speed;


  typedef boost::shared_ptr< ::wsg_50_common::Cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wsg_50_common::Cmd_<ContainerAllocator>  const> ConstPtr;
}; // struct Cmd
typedef  ::wsg_50_common::Cmd_<std::allocator<void> > Cmd;

typedef boost::shared_ptr< ::wsg_50_common::Cmd> CmdPtr;
typedef boost::shared_ptr< ::wsg_50_common::Cmd const> CmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wsg_50_common::Cmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wsg_50_common::Cmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wsg_50_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::Cmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::Cmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wsg_50_common::Cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a9d4654d92a2e086717420189f98c76a";
  }

  static const char* value(const  ::wsg_50_common::Cmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa9d4654d92a2e086ULL;
  static const uint64_t static_value2 = 0x717420189f98c76aULL;
};

template<class ContainerAllocator>
struct DataType< ::wsg_50_common::Cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/Cmd";
  }

  static const char* value(const  ::wsg_50_common::Cmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wsg_50_common::Cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string mode\n\
float32 pos\n\
float32 speed\n\
\n\
\n\
";
  }

  static const char* value(const  ::wsg_50_common::Cmd_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wsg_50_common::Cmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
    stream.next(m.pos);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Cmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wsg_50_common::Cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wsg_50_common::Cmd_<ContainerAllocator> & v) 
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "pos: ";
    Printer<float>::stream(s, indent + "  ", v.pos);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WSG_50_COMMON_MESSAGE_CMD_H

