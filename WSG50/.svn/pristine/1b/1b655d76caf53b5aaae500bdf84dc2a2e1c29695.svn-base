/* Auto-generated by genmsg_cpp for file /home/clonecomputer/catkin_ws/src/wsg50/wsg_50_common/srv/Incr.srv */
#ifndef WSG_50_COMMON_SERVICE_INCR_H
#define WSG_50_COMMON_SERVICE_INCR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace wsg_50_common
{
template <class ContainerAllocator>
struct IncrRequest_ {
  typedef IncrRequest_<ContainerAllocator> Type;

  IncrRequest_()
  : direction()
  , increment(0.0)
  {
  }

  IncrRequest_(const ContainerAllocator& _alloc)
  : direction(_alloc)
  , increment(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  direction;

  typedef float _increment_type;
  float increment;


  typedef boost::shared_ptr< ::wsg_50_common::IncrRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wsg_50_common::IncrRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct IncrRequest
typedef  ::wsg_50_common::IncrRequest_<std::allocator<void> > IncrRequest;

typedef boost::shared_ptr< ::wsg_50_common::IncrRequest> IncrRequestPtr;
typedef boost::shared_ptr< ::wsg_50_common::IncrRequest const> IncrRequestConstPtr;



template <class ContainerAllocator>
struct IncrResponse_ {
  typedef IncrResponse_<ContainerAllocator> Type;

  IncrResponse_()
  : error(0)
  {
  }

  IncrResponse_(const ContainerAllocator& _alloc)
  : error(0)
  {
  }

  typedef uint8_t _error_type;
  uint8_t error;


  typedef boost::shared_ptr< ::wsg_50_common::IncrResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wsg_50_common::IncrResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct IncrResponse
typedef  ::wsg_50_common::IncrResponse_<std::allocator<void> > IncrResponse;

typedef boost::shared_ptr< ::wsg_50_common::IncrResponse> IncrResponsePtr;
typedef boost::shared_ptr< ::wsg_50_common::IncrResponse const> IncrResponseConstPtr;


struct Incr
{

typedef IncrRequest Request;
typedef IncrResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Incr
} // namespace wsg_50_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::IncrRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::IncrRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wsg_50_common::IncrRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cca1e2c685538b4c18fbfec9ea6b6b36";
  }

  static const char* value(const  ::wsg_50_common::IncrRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcca1e2c685538b4cULL;
  static const uint64_t static_value2 = 0x18fbfec9ea6b6b36ULL;
};

template<class ContainerAllocator>
struct DataType< ::wsg_50_common::IncrRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/IncrRequest";
  }

  static const char* value(const  ::wsg_50_common::IncrRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wsg_50_common::IncrRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string direction\n\
float32 increment\n\
\n\
";
  }

  static const char* value(const  ::wsg_50_common::IncrRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::IncrResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::IncrResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wsg_50_common::IncrResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bf8e3bc5443691736455ca47e3128027";
  }

  static const char* value(const  ::wsg_50_common::IncrResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbf8e3bc544369173ULL;
  static const uint64_t static_value2 = 0x6455ca47e3128027ULL;
};

template<class ContainerAllocator>
struct DataType< ::wsg_50_common::IncrResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/IncrResponse";
  }

  static const char* value(const  ::wsg_50_common::IncrResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wsg_50_common::IncrResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 error\n\
\n\
\n\
";
  }

  static const char* value(const  ::wsg_50_common::IncrResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wsg_50_common::IncrResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wsg_50_common::IncrRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.direction);
    stream.next(m.increment);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IncrRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wsg_50_common::IncrResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.error);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IncrResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<wsg_50_common::Incr> {
  static const char* value() 
  {
    return "b996830260cb95e784a9d9fbb5e34c61";
  }

  static const char* value(const wsg_50_common::Incr&) { return value(); } 
};

template<>
struct DataType<wsg_50_common::Incr> {
  static const char* value() 
  {
    return "wsg_50_common/Incr";
  }

  static const char* value(const wsg_50_common::Incr&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wsg_50_common::IncrRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b996830260cb95e784a9d9fbb5e34c61";
  }

  static const char* value(const wsg_50_common::IncrRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wsg_50_common::IncrRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/Incr";
  }

  static const char* value(const wsg_50_common::IncrRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wsg_50_common::IncrResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b996830260cb95e784a9d9fbb5e34c61";
  }

  static const char* value(const wsg_50_common::IncrResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wsg_50_common::IncrResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/Incr";
  }

  static const char* value(const wsg_50_common::IncrResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WSG_50_COMMON_SERVICE_INCR_H

