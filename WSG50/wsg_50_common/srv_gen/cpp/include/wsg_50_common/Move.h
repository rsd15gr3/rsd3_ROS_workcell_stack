/* Auto-generated by genmsg_cpp for file /home/clonecomputer/catkin_ws/src/wsg50/wsg_50_common/srv/Move.srv */
#ifndef WSG_50_COMMON_SERVICE_MOVE_H
#define WSG_50_COMMON_SERVICE_MOVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace wsg_50_common
{
template <class ContainerAllocator>
struct MoveRequest_ {
  typedef MoveRequest_<ContainerAllocator> Type;

  MoveRequest_()
  : width(0.0)
  , speed(0.0)
  {
  }

  MoveRequest_(const ContainerAllocator& _alloc)
  : width(0.0)
  , speed(0.0)
  {
  }

  typedef float _width_type;
  float width;

  typedef float _speed_type;
  float speed;


  typedef boost::shared_ptr< ::wsg_50_common::MoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wsg_50_common::MoveRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveRequest
typedef  ::wsg_50_common::MoveRequest_<std::allocator<void> > MoveRequest;

typedef boost::shared_ptr< ::wsg_50_common::MoveRequest> MoveRequestPtr;
typedef boost::shared_ptr< ::wsg_50_common::MoveRequest const> MoveRequestConstPtr;



template <class ContainerAllocator>
struct MoveResponse_ {
  typedef MoveResponse_<ContainerAllocator> Type;

  MoveResponse_()
  : error(0)
  {
  }

  MoveResponse_(const ContainerAllocator& _alloc)
  : error(0)
  {
  }

  typedef uint8_t _error_type;
  uint8_t error;


  typedef boost::shared_ptr< ::wsg_50_common::MoveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wsg_50_common::MoveResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveResponse
typedef  ::wsg_50_common::MoveResponse_<std::allocator<void> > MoveResponse;

typedef boost::shared_ptr< ::wsg_50_common::MoveResponse> MoveResponsePtr;
typedef boost::shared_ptr< ::wsg_50_common::MoveResponse const> MoveResponseConstPtr;


struct Move
{

typedef MoveRequest Request;
typedef MoveResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Move
} // namespace wsg_50_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::MoveRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::MoveRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wsg_50_common::MoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b2d4f46fe020a06d64128c90310c767d";
  }

  static const char* value(const  ::wsg_50_common::MoveRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb2d4f46fe020a06dULL;
  static const uint64_t static_value2 = 0x64128c90310c767dULL;
};

template<class ContainerAllocator>
struct DataType< ::wsg_50_common::MoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/MoveRequest";
  }

  static const char* value(const  ::wsg_50_common::MoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wsg_50_common::MoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 width\n\
float32 speed\n\
\n\
";
  }

  static const char* value(const  ::wsg_50_common::MoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wsg_50_common::MoveRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::MoveResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::MoveResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wsg_50_common::MoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bf8e3bc5443691736455ca47e3128027";
  }

  static const char* value(const  ::wsg_50_common::MoveResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbf8e3bc544369173ULL;
  static const uint64_t static_value2 = 0x6455ca47e3128027ULL;
};

template<class ContainerAllocator>
struct DataType< ::wsg_50_common::MoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/MoveResponse";
  }

  static const char* value(const  ::wsg_50_common::MoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wsg_50_common::MoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 error\n\
\n\
\n\
";
  }

  static const char* value(const  ::wsg_50_common::MoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wsg_50_common::MoveResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wsg_50_common::MoveRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.width);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wsg_50_common::MoveResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.error);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<wsg_50_common::Move> {
  static const char* value() 
  {
    return "ac4bc9278b95c49c6bb95b3db7e0a0e4";
  }

  static const char* value(const wsg_50_common::Move&) { return value(); } 
};

template<>
struct DataType<wsg_50_common::Move> {
  static const char* value() 
  {
    return "wsg_50_common/Move";
  }

  static const char* value(const wsg_50_common::Move&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wsg_50_common::MoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac4bc9278b95c49c6bb95b3db7e0a0e4";
  }

  static const char* value(const wsg_50_common::MoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wsg_50_common::MoveRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/Move";
  }

  static const char* value(const wsg_50_common::MoveRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wsg_50_common::MoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac4bc9278b95c49c6bb95b3db7e0a0e4";
  }

  static const char* value(const wsg_50_common::MoveResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wsg_50_common::MoveResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/Move";
  }

  static const char* value(const wsg_50_common::MoveResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WSG_50_COMMON_SERVICE_MOVE_H

