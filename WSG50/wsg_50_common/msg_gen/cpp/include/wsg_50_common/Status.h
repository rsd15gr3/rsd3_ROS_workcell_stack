/* Auto-generated by genmsg_cpp for file /home/clonecomputer/catkin_ws/src/wsg50/wsg_50_common/msg/Status.msg */
#ifndef WSG_50_COMMON_MESSAGE_STATUS_H
#define WSG_50_COMMON_MESSAGE_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wsg_50_common
{
template <class ContainerAllocator>
struct Status_ {
  typedef Status_<ContainerAllocator> Type;

  Status_()
  : status()
  , width(0.0)
  , acc(0.0)
  , force(0.0)
  {
  }

  Status_(const ContainerAllocator& _alloc)
  : status(_alloc)
  , width(0.0)
  , acc(0.0)
  , force(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  typedef float _width_type;
  float width;

  typedef float _acc_type;
  float acc;

  typedef float _force_type;
  float force;


  typedef boost::shared_ptr< ::wsg_50_common::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wsg_50_common::Status_<ContainerAllocator>  const> ConstPtr;
}; // struct Status
typedef  ::wsg_50_common::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::wsg_50_common::Status> StatusPtr;
typedef boost::shared_ptr< ::wsg_50_common::Status const> StatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wsg_50_common::Status_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wsg_50_common::Status_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wsg_50_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::Status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wsg_50_common::Status_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wsg_50_common::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8ac3d7b39b55f28a5ae1f39234f73290";
  }

  static const char* value(const  ::wsg_50_common::Status_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8ac3d7b39b55f28aULL;
  static const uint64_t static_value2 = 0x5ae1f39234f73290ULL;
};

template<class ContainerAllocator>
struct DataType< ::wsg_50_common::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wsg_50_common/Status";
  }

  static const char* value(const  ::wsg_50_common::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wsg_50_common::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string status\n\
float32 width\n\
float32 acc\n\
float32 force\n\
\n\
";
  }

  static const char* value(const  ::wsg_50_common::Status_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wsg_50_common::Status_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.width);
    stream.next(m.acc);
    stream.next(m.force);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Status_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wsg_50_common::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wsg_50_common::Status_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "acc: ";
    Printer<float>::stream(s, indent + "  ", v.acc);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WSG_50_COMMON_MESSAGE_STATUS_H

